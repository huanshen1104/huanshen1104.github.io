<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青戈的博客</title>
  
  <subtitle>记录所做、所见、所思、所学</subtitle>
  <link href="https://huanshen1104.github.io/atom.xml" rel="self"/>
  
  <link href="https://huanshen1104.github.io/"/>
  <updated>2021-11-01T06:24:15.629Z</updated>
  <id>https://huanshen1104.github.io/</id>
  
  <author>
    <name>青戈</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《小狗钱钱》书中的精华都在这了</title>
    <link href="https://huanshen1104.github.io/2020/09/24/%E3%80%8A%E5%B0%8F%E7%8B%97%E9%92%B1%E9%92%B1%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    <id>https://huanshen1104.github.io/2020/09/24/%E3%80%8A%E5%B0%8F%E7%8B%97%E9%92%B1%E9%92%B1%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/</id>
    <published>2020-09-24T03:07:02.000Z</published>
    <updated>2021-11-01T06:24:15.629Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/09/24/%E3%80%8A%E5%B0%8F%E7%8B%97%E9%92%B1%E9%92%B1%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/1.png"></p><h4 id="初见"><a href="#初见" class="headerlink" title="初见"></a>初见</h4><p>初次看《小狗钱钱》，竟有一种莫名的感动，在我看来，书中的小狗钱钱，就像来自未来的次世代机器人，通晓世间的一切，而它愿意把关于金钱的一切都告诉主人公，我就这样跟随着主人公的脚步，贪婪的吸收着他们之间交流的一切，生怕错过了这一窥探金钱真谛的机会。</p><span id="more"></span><p>可以说，这本书就是《富爸爸穷爸爸》的童话版，虽然讲的道理大同小异，但是作者用更通俗易懂、更具实操性的叙述方式，将自身实现财务自由所用到的武功招式及内功心法一一展示给读者，使读者读来神清气爽，一气呵成，易于接受，是学习理财不可多得的入门书籍。</p><p>那么，在金钱这件事上，小狗钱钱都告诉了我们哪些东西来帮助我们变得富有呢，我在这里总结一下其中具有实操性的内容，也算是自我学习。</p><h4 id="愿望清单"><a href="#愿望清单" class="headerlink" title="愿望清单"></a>愿望清单</h4><p>列出自己想要变得富有的愿望清单，说的直白点就是，我为什么要变得富有，我对金钱到底有多渴望，越具体越好，就像这样：</p><ul><li><em>去某个城市旅行</em></li><li><em>拥有一辆代步车</em></li><li><em>拥有一套大房子</em></li><li>…</li></ul><blockquote><p>思考：这个做法就是挖掘自己想要变得富有的具体原因，清楚自己想要的是什么</p></blockquote><h4 id="制作梦想相册"><a href="#制作梦想相册" class="headerlink" title="制作梦想相册"></a>制作梦想相册</h4><p>选出最想要实现的愿望，将其有关的照片制作成梦想相册，每天看几遍，并想象愿望已经实现后的情景，体会那种快感。</p><p>把想象的东西视觉化，你的愿望就更容易实现，这其中的道理不需要深究，就好像<strong>按了开关灯就会立即点亮</strong>一样简单，你只需要做这件事就好了。</p><h4 id="梦想储蓄罐"><a href="#梦想储蓄罐" class="headerlink" title="梦想储蓄罐"></a>梦想储蓄罐</h4><p>为相对较容易实现的愿望准备梦想储蓄罐并坚持定期向每个梦想储蓄罐存钱，直至实现。如：旅行、代步车这些相对较小的愿望可以准备梦想储蓄罐。</p><p>只有不断地向梦想储蓄罐存钱，你才会紧盯目标，并以目标为激励，寻找一切可实现目标的机会，一步步实现每一个愿望。就像书中的主人公一样，为了能去国外学习，他拼命的想尽一切办法赚钱，这种愿望是具体而强烈的。</p><blockquote><p>思考：</p><p>梦想相册和梦想储蓄罐两个方法是为了持续性的强化自己的愿望，人性是懒惰的，即使心中有愿望，如果不足够强烈，很容易就淹没在生活的琐事中，然而作者已经为我们指出了行之有效的方法，我们只需拿来照做即可，它是否起作用不必深究，作者已经用自己的实际行动帮我们验证过，相信即可，就如同按下开关灯就会亮那样简单。</p><p>梦想储蓄罐还有一个非常重要的作用：专款专用，避免透支消费。</p></blockquote><h4 id="成功日记"><a href="#成功日记" class="headerlink" title="成功日记"></a>成功日记</h4><p>想要达成目标并不是一件容易的事情，我们常常会因为信心不足而中途放弃，而树立自信最简单的方式就是把自己已经做成功的事情写下来，任何小事都行，每天都写，你会发现，越写越有自信。而想要积累更多的成功的事情，有一个原则就是：<strong>做你自己擅长的事情，把精力集中在你知道的、能做的和拥有的东西上。</strong>因为，很多时候，我们会花很多时间去想我们不知道、不能做或没有的东西上面。</p><h4 id="遵循72小时原则"><a href="#遵循72小时原则" class="headerlink" title="遵循72小时原则"></a>遵循72小时原则</h4><p>如果决定去做一件事，必须在72小时之内开始，否则很可能永远不会开始。</p><p>比如以上提到的这些方法，如果你认同并且最终想要变得富有的话，你必须马上开始去做，并且不能抱着「试试看」的心态，必须切实认真的去执行，否则就等于还没有做就已经给自己想好了退路，没错，不能实验，<strong>只有两个选择——做或者不做</strong>。</p><h4 id="养一只”鹅”给你下蛋"><a href="#养一只”鹅”给你下蛋" class="headerlink" title="养一只”鹅”给你下蛋"></a>养一只”鹅”给你下蛋</h4><p>学会用钱生钱，才是走向财务自由的终极之道。书中所讲的”鹅”就是用来生钱的钱，而”利息”就是金蛋，而要养一只”鹅”，就要为它不断的投入金钱，让”鹅”越来越肥，下的蛋越来越大。因此，在梦想储蓄罐之外，再设立一个养鹅账户变得很有必要。</p><p>到这里，作者把我们赚到的钱分成了梦想储蓄罐、养鹅账户以及日常开销三个部分，这个资金分配方式和”标准普尔家庭资产象限图”描述的方法有着异曲同工之妙，这也从侧面印证了资金的合理规划对于理财的重要性。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>不难发现，作者实际上是按照 <strong>确定目标——强化目标——实现目标</strong> 的思路，为我们量身定制了实操性极强的方法来帮助我们建立富人的思维及行为模式，道理很简单，难点就在于持续坚持，如果我们能把这些方法贯彻始终，即使最终不能实现财务自由，至少也不会出现太严重的财务问题。而在现实生活中，我看到很多朋友因为信用卡透支严重，每个月都要借钱填补窟窿，这就是对金钱没有任何规划造成的。</p><p>有人说要先有钱才能理财，实际上理财首先需要提升的是正确规划资金的认知，而不是如何变得有钱，只有认知改变了，才能以正确的方式对待金钱，最终才能朝着财务自由的方向行走。</p><p>财务自由这个愿望足够大，它更多的是对金钱的观念上的改变，具体的说，就是对金钱的合理规划的一系列方法，当我们开始使用这些方法去分配我们的金钱，我们实际上就已经开始用富人的思维思考，梦想储蓄罐这一系列做法，就是我们初尝这些方法的第一步。</p><p>当然，以上只是书中的一部分内容，也是我认为比较重要又容易被忽视的东西，因为它足够简单，但是大道至简，需持之以恒，才能体现出它的作用，感兴趣的朋友一定要去看一看。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2020/09/24/%E3%80%8A%E5%B0%8F%E7%8B%97%E9%92%B1%E9%92%B1%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/1.png&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;初见&quot;&gt;&lt;a href=&quot;#初见&quot; class=&quot;headerlink&quot; title=&quot;初见&quot;&gt;&lt;/a&gt;初见&lt;/h4&gt;&lt;p&gt;初次看《小狗钱钱》，竟有一种莫名的感动，在我看来，书中的小狗钱钱，就像来自未来的次世代机器人，通晓世间的一切，而它愿意把关于金钱的一切都告诉主人公，我就这样跟随着主人公的脚步，贪婪的吸收着他们之间交流的一切，生怕错过了这一窥探金钱真谛的机会。&lt;/p&gt;</summary>
    
    
    
    <category term="开卷有益" scheme="https://huanshen1104.github.io/categories/%E5%BC%80%E5%8D%B7%E6%9C%89%E7%9B%8A/"/>
    
    
    <category term="理财" scheme="https://huanshen1104.github.io/tags/%E7%90%86%E8%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>使用acme.sh申请免费的HTTPS证书</title>
    <link href="https://huanshen1104.github.io/2020/08/15/%E4%BD%BF%E7%94%A8acme-sh%E7%94%B3%E8%AF%B7%E5%85%8D%E8%B4%B9%E7%9A%84HTTPS%E8%AF%81%E4%B9%A6/"/>
    <id>https://huanshen1104.github.io/2020/08/15/%E4%BD%BF%E7%94%A8acme-sh%E7%94%B3%E8%AF%B7%E5%85%8D%E8%B4%B9%E7%9A%84HTTPS%E8%AF%81%E4%B9%A6/</id>
    <published>2020-08-15T07:48:36.000Z</published>
    <updated>2021-10-29T08:20:22.343Z</updated>
    
    <content type="html"><![CDATA[<p>最近把自己的网站从HTTP升级为HTTPS，在这里把过程及踩过的坑记录一下。</p><p><a href="https://github.com/Neilpang/acme.sh"><code>acme.sh</code></a>是一个纯粹用Shell语言编写的脚本，本质上是一个实现了ACME协议的客户端，它足够简单，功能强大且易于使用，可以实现自动颁发、续订和安装证书，目前支持ZeroSSL、BuyPass、Let`s Encrypt等多种不同证书，本文使用的是ZeroSSL证书。</p><span id="more"></span><h3 id="安装acme-sh"><a href="#安装acme-sh" class="headerlink" title="安装acme.sh"></a>安装acme.sh</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl https://get.acme.sh | sh</span><br></pre></td></tr></table></figure><p>该安装脚本做了几件事：</p><ul><li>把 acme.sh 安装到了 home 目录下：~/.acme.sh/</li><li>创建了一个 bash 的 alias, 方便使用: alias acme.sh=~/.acme.sh/acme.sh</li><li>创建了cronjob，每天 0:00点自动检测所有的证书，如果快过期了，则会自动更新证书。</li></ul><p>可能会因为网络问题无法自动安装，则需要手动更改安装脚本内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 下载并保存脚本</span><br><span class="line">curl https://get.acme.sh -o acme_install.sh</span><br><span class="line"></span><br><span class="line"># 更改脚本内域名，使用代理加速</span><br><span class="line">sed -i &#x27;s/raw/ghproxy.com\/https:\/\/raw/g&#x27; acme_install.sh</span><br><span class="line"></span><br><span class="line"># 安装</span><br><span class="line">chmod +x acme_install.sh</span><br><span class="line">./acme_install.sh</span><br></pre></td></tr></table></figure><p>或者直接手动安装：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/acmesh-official/acme.sh.git</span><br><span class="line">cd ./acme.sh</span><br><span class="line">./acme.sh --install</span><br></pre></td></tr></table></figure><h3 id="注册-ZeroSSL-账号"><a href="#注册-ZeroSSL-账号" class="headerlink" title="注册 ZeroSSL 账号"></a>注册 ZeroSSL 账号</h3><p>申请证书之前建议先去ZeroSSL官网注册账号，ZeroSSL官网地址：<a href="https://zerossl.com/">https://zerossl.com</a></p><p>也可以直接使用以下命令来注册，如果已经在官网注册，该命令会自动关联账户，邮箱改为你自己的ZeroSSL邮箱，一定不要随便填。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh  --register-account  -m myemail@example.com --server zerossl</span><br></pre></td></tr></table></figure><h3 id="将-acme-sh-的注册服务器改为-ZeroSSL"><a href="#将-acme-sh-的注册服务器改为-ZeroSSL" class="headerlink" title="将 acme.sh 的注册服务器改为 ZeroSSL"></a>将 acme.sh 的注册服务器改为 ZeroSSL</h3><p>如果你的<code>acme.sh</code> 是2.x版本，默认使用Let`s Encrypt作为服务提供商，我们可以通过以下命令，将其更换为ZeroSSL：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --set-default-ca --server zerossl</span><br></pre></td></tr></table></figure><h3 id="配置DNS-API"><a href="#配置DNS-API" class="headerlink" title="配置DNS API"></a>配置DNS API</h3><p>本文使用 DNS 验证的方法来验证域名，<code>acme.sh</code> 可以通过 DNS 提供商的 API 自动设置验证记录，具体用法详见文档：<a href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi">https://github.com/acmesh-official/acme.sh/wiki/dnsapi</a><br>常用的 CloudFlare 、 DNSPod 、 CloudXNS 、阿里云 等DNS服务都支持。</p><p>以阿里云为例，登录后台找到账号的秘钥(建议创建子账号来专门管理此功能)：<br><img src="/2020/08/15/%E4%BD%BF%E7%94%A8acme-sh%E7%94%B3%E8%AF%B7%E5%85%8D%E8%B4%B9%E7%9A%84HTTPS%E8%AF%81%E4%B9%A6/AccessKey.png"><br>如果你使用的是子账号，一定要给子账号开通以下权限：<br><img src="/2020/08/15/%E4%BD%BF%E7%94%A8acme-sh%E7%94%B3%E8%AF%B7%E5%85%8D%E8%B4%B9%E7%9A%84HTTPS%E8%AF%81%E4%B9%A6/%E9%98%BF%E9%87%8C%E4%BA%91dns%E5%AD%90%E8%B4%A6%E5%8F%B7%E6%8E%88%E6%9D%83.png"><br>接下来执行下面命令即可：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export Ali_Key=&quot;****************************&quot;</span><br><span class="line">export Ali_Secret=&quot;**************************&quot; </span><br></pre></td></tr></table></figure><h3 id="签发证书"><a href="#签发证书" class="headerlink" title="签发证书"></a>签发证书</h3><p>以zmtupian.com为例，该域名使用阿里云解析，在上面的步骤中已经配置好阿里云DNS API</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --dns dns_ali --issue -d zmtupian.com -d *.zmtupian.com</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><p>–dns 指定 DNS 服务商，dns_ali 代表阿里云，还有 dns_cf 代表 CloudFlare，更多的字段见 <a href="https://github.com/acmesh-official/acme.sh/tree/master/dnsapi">https://github.com/acmesh-official/acme.sh/tree/master/dnsapi</a></p><p>如果不使用 API 自动添加验证，则不用添加后续参数，如：acme.sh –issue –dns -d example.com ….</p></li><li><p>-d *.example.com 表示签发泛域名证书</p></li></ul><p>执行命令之后看输出的内容可以确定证书所在位置，这时就签发成功了。</p><h3 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --install-cert -d zmtupian.com \</span><br><span class="line">        --key-file       /var/www/ssl/zmtupian.com.key  \</span><br><span class="line">        --fullchain-file /var/www/ssl/zmtupian.com.cert \</span><br><span class="line">        --reloadcmd     &quot;service nginx force-reload&quot;</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>–key-file 和 -fullchain-file 后接想要安装到的目录及证书名</li><li>–reloadcmd 后接服务的重启命令，程序自动续期证书后会运行该命令使其生效，一定不能漏</li></ul><p>默认情况下，证书将每60天更新一次（可配置），证书更新后，服务将通过reloadcmd设置的命令自动重新加载。</p><h3 id="启用https服务"><a href="#启用https服务" class="headerlink" title="启用https服务"></a>启用https服务</h3><p>修改服务器的配置文件启用HTTPS，以nginx为例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        server_name  www.zmtupian.com zmtupian.com;</span><br><span class="line"></span><br><span class="line">        ssl_certificate      /var/www/ssl/zmtupian.com.cert;</span><br><span class="line">        ssl_certificate_key  /var/www/ssl/zmtupian.com.key;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.zmtupian.com zmtupian.com;</span><br><span class="line"></span><br><span class="line">    return 301 https://$host$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置好后，检查是否有错误，然后重启服务器即可：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br><span class="line">service nginx force-reload</span><br></pre></td></tr></table></figure><p>最后，记得去服务器管理后台打开服务器443端口。</p><p>大功告成！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近把自己的网站从HTTP升级为HTTPS，在这里把过程及踩过的坑记录一下。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Neilpang/acme.sh&quot;&gt;&lt;code&gt;acme.sh&lt;/code&gt;&lt;/a&gt;是一个纯粹用Shell语言编写的脚本，本质上是一个实现了ACME协议的客户端，它足够简单，功能强大且易于使用，可以实现自动颁发、续订和安装证书，目前支持ZeroSSL、BuyPass、Let`s Encrypt等多种不同证书，本文使用的是ZeroSSL证书。&lt;/p&gt;</summary>
    
    
    
    <category term="网站建设" scheme="https://huanshen1104.github.io/categories/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="HTTPS" scheme="https://huanshen1104.github.io/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>更换电脑后，如何继续使用hexo更新博客？</title>
    <link href="https://huanshen1104.github.io/2017/11/15/%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%EF%BC%8C%E5%A6%82%E4%BD%95%E7%BB%A7%E7%BB%AD%E4%BD%BF%E7%94%A8hexo%E6%9B%B4%E6%96%B0%E5%8D%9A%E5%AE%A2%EF%BC%9F/"/>
    <id>https://huanshen1104.github.io/2017/11/15/%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%EF%BC%8C%E5%A6%82%E4%BD%95%E7%BB%A7%E7%BB%AD%E4%BD%BF%E7%94%A8hexo%E6%9B%B4%E6%96%B0%E5%8D%9A%E5%AE%A2%EF%BC%9F/</id>
    <published>2017-11-15T08:59:54.000Z</published>
    <updated>2021-11-16T09:10:13.586Z</updated>
    
    <content type="html"><![CDATA[<p>最近在使用hexo更新博客的过程中，发现一个比较麻烦的事情，就是修改配置文件后，不能便捷的把配置同步到其它电脑上，直接拷贝配置文件到其它电脑显然不是一个明智的选择，总有出错的时候，并且没法追溯历史修改，于是，用git的分支来管理hexo的源码和静态文件便是不二的选择，简单总结一下。</p><span id="more"></span><h3 id="初始搭建流程"><a href="#初始搭建流程" class="headerlink" title="初始搭建流程"></a>初始搭建流程</h3><ul><li>创建仓库之后创建master（放静态文件）和hexo（放源码）两个分支；</li><li>使用<code>git clone -b hexo 仓库地址</code> 命令拷贝 <code>hexo</code> 分支到本地；</li><li>进入本地仓库文件夹，保持在hexo分支，依次执行<code>npm install hexo</code>、<code>hexo init</code>、<code>npm install</code> 和 <code>npm install hexo-deployer-git</code>；</li><li>根据需要修改hexo配置文件，注意deplay参数的分支应该为master；</li><li>依次执行<code>git add .</code> 、<code>git commit -m &quot;...&quot;</code> 、<code>git push origin hexo</code> 把源码提交到远程hexo分支；</li><li>接着执行 <code>hexo d -g</code> 部署网站到GitHub Pages。</li></ul><p>这样就是一个完整的流程了，你会发现，hexo自动生成的文件里面已经有一个<code>.gitignore</code>文件，说明其本意就是希望我们把源码存放到github，这个文件里面已经帮我们设置好了哪些文件不应该被提交，如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure><blockquote><p>注： <code>themes</code> 文件夹因为一次修改好之后几乎不会有什么变动了，可以跟随源码一起存放到gitgub，这样换电脑的时候就不用再配置主题，如果需要换新的主题，提交源码的时候把新的主题包加进去即可。</p></blockquote><h3 id="日常更新流程"><a href="#日常更新流程" class="headerlink" title="日常更新流程"></a>日常更新流程</h3><p>本地更新博客（文章及样式修改）后，按照下面两步走来进行代码更新。</p><ul><li>依次执行 <code>git add .</code>、<code>git commit -m &quot;...&quot;</code>、<code>git push origin hexo</code>更新源码到远程hexo分支；</li><li>执行 <code>hexo d -g</code> 部署网站到GitHub Pages。</li></ul><blockquote><p>注：建议严格按照以上两个步骤来执行，如果先执行第2步，在极端情况下（比如突然停电、死机），会导致源码部分丢失。</p></blockquote><h3 id="更换电脑后的流程"><a href="#更换电脑后的流程" class="headerlink" title="更换电脑后的流程"></a>更换电脑后的流程</h3><p>换电脑后，按照以下步骤操作：</p><ul><li>使用<code>git clone -b hexo</code> 仓库地址<code>命令拷贝 </code>hexo` 分支到本地；</li><li>进入本地仓库文件夹，保持在hexo分支，依次执行<code>npm install hexo</code>、<code>npm install</code>；</li></ul><blockquote><p>注：这里不需要 <code>hexo inie</code> 命令了，另外，平时安装插件的时候记得加上 <code>--save</code> 参数，这样 <code>package.json</code>文件里就会写入插件的安装信息，当我们换电脑的时候，只需要 <code>npm install</code> 命令即可安装所有插件。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在使用hexo更新博客的过程中，发现一个比较麻烦的事情，就是修改配置文件后，不能便捷的把配置同步到其它电脑上，直接拷贝配置文件到其它电脑显然不是一个明智的选择，总有出错的时候，并且没法追溯历史修改，于是，用git的分支来管理hexo的源码和静态文件便是不二的选择，简单总结一下。&lt;/p&gt;</summary>
    
    
    
    <category term="网站建设" scheme="https://huanshen1104.github.io/categories/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="hexo" scheme="https://huanshen1104.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
